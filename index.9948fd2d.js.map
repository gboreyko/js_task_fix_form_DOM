{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,IAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAa,SAAS,gBAAgB,CAAC,W,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAExC,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAe,CAAA,CAAA,OAAA,QAAA,CAAA,GAAf,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAuB,CAAvB,IAAM,EAAN,EAAA,KAAA,CACG,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAY,EAAM,YAAY,CAAC,QAC/B,EAAU,EAAM,YAAY,CAAC,MAE7B,EAAU,AAalB,SAAsB,CAAS,EAK7B,IAAK,IATiB,EAKhB,EAAY,EAAU,WAAW,GACjC,EAAc,CAAC,EAAE,CACnB,EAAS,GAEJ,EAAI,EAAG,EAAI,EAAU,MAAM,CAAE,IAChC,CAAS,CAAC,EAAE,GAAK,CAAS,CAAC,EAAE,EAC/B,EAAY,IAAI,CAAC,GAIrB,EAAY,IAAI,CAAC,EAAU,MAAM,EAEjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAY,MAAM,CAAG,EAAG,IAC1C,GAAU,EAAU,KAAK,CAAC,CAAW,CAAC,EAAE,CAAE,CAAW,CAAC,EAAI,EAAE,EAAI,IAKlE,MAtBO,CADe,EAqBF,EAAO,IAAI,IApBjB,CAAI,CAAC,EAAE,CAAC,WAAW,GAAK,EAAK,KAAK,CAAC,GAAK,EAuBxD,EAjC+B,EAE7B,CAAA,EAAM,WAAW,CAAG,EACpB,EAAM,OAAO,CAAG,EAChB,EAAM,SAAS,CAAC,GAAG,CAAC,eACpB,EAAM,YAAY,CAAC,cAAe,GAClC,EAAM,MAAM,CAAC,EACf,C,C,M,E,CAZK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\"input\"));\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = inputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var input = _step.value;\n        var label = document.createElement(\"label\");\n        var inputName = input.getAttribute(\"name\");\n        var inputId = input.getAttribute(\"id\");\n        var putText = convertCamel(inputName);\n        label.textContent = putText;\n        label.htmlFor = inputId;\n        label.classList.add(\"field-label\");\n        input.setAttribute(\"placeholder\", putText);\n        input.before(label);\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nfunction capitalizeWord(word) {\n    return word ? word[0].toUpperCase() + word.slice(1) : \"\";\n}\nfunction convertCamel(camelWord) {\n    var lowerWord = camelWord.toLowerCase();\n    var arrayIndexs = [\n        0\n    ];\n    var result = \"\";\n    for(var i = 0; i < camelWord.length; i++)if (camelWord[i] !== lowerWord[i]) arrayIndexs.push(i);\n    arrayIndexs.push(camelWord.length);\n    for(var k = 0; k < arrayIndexs.length - 1; k++)result += lowerWord.slice(arrayIndexs[k], arrayIndexs[k + 1]) + \" \";\n    var finalResult = result.trim();\n    return capitalizeWord(finalResult);\n}\n\n//# sourceMappingURL=index.9948fd2d.js.map\n","'use strict';\n\nconst inputs = [...document.querySelectorAll('input')];\n\nfor (const input of inputs) {\n  const label = document.createElement('label');\n  const inputName = input.getAttribute('name');\n  const inputId = input.getAttribute('id');\n\n  const putText = convertCamel(inputName);\n\n  label.textContent = putText;\n  label.htmlFor = inputId;\n  label.classList.add('field-label');\n  input.setAttribute('placeholder', putText);\n  input.before(label);\n}\n\nfunction capitalizeWord(word) {\n  return word ? word[0].toUpperCase() + word.slice(1) : '';\n}\n\nfunction convertCamel(camelWord) {\n  const lowerWord = camelWord.toLowerCase();\n  const arrayIndexs = [0];\n  let result = '';\n\n  for (let i = 0; i < camelWord.length; i++) {\n    if (camelWord[i] !== lowerWord[i]) {\n      arrayIndexs.push(i);\n    }\n  }\n\n  arrayIndexs.push(camelWord.length);\n\n  for (let k = 0; k < arrayIndexs.length - 1; k++) {\n    result += lowerWord.slice(arrayIndexs[k], arrayIndexs[k + 1]) + ' ';\n  }\n\n  const finalResult = result.trim();\n\n  return capitalizeWord(finalResult);\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","input","value","label","createElement","inputName","getAttribute","inputId","putText","convertCamel","camelWord","word","lowerWord","toLowerCase","arrayIndexs","result","push","k","trim","toUpperCase","textContent","htmlFor","classList","add","setAttribute","before","err","return"],"version":3,"file":"index.9948fd2d.js.map"}